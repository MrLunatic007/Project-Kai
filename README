Project Kai - A Personal Reasoning Assistant 🤖

Project Kai is an Open-Source friend built from scratch to meet the needs of a personal assistant. By "from scratch", I mean that the model is not made using transformers, everything from the reasoning to the models abilty to reason and generate full sentences (Ability of GPTs and BERT) is built from scratch. This means that the model is fully stand alone and also gets information from the internet if needed, but mostly it relies on the data that it has been trained on. I planned for it to be uncensored and it is still my aim with this project. The model is made to run effectively and efficiently on devices like an i5-8600 CPU with 8GB RAM and higher so it runs on almost every machine posible.

Features ✨

    Context-Aware Conversations:

        Maintains conversation context for coherent and relevant responses.

        Uses short-term and long-term memory to recall past interactions.

    Hybrid Reasoning Engine:

        Combines rule-based logic with neural reasoning for better decision-making.

        Detects reasoning types (causal, deductive, inductive, etc.) to tailor responses.

    Reinforcement Learning:

        Learns from user interactions to improve response quality.

        Uses rewards to optimize conversation flow and engagement.

    Dynamic Memory Management:

        Stores and retrieves important conversation snippets.

        Automatically retrains on memory data for personalization.

        Prunes outdated memories to maintain efficiency.

    Lightweight Architecture:

        Optimized for resource-constrained devices (e.g., Raspberry Pi).

        Uses subword tokenization and model quantization for efficiency.

    Progressive Training:

        Adapts learning rates dynamically during training.

        Incorporates memory-based retraining for continuous improvement.

Architecture 🏗️

Kai AI is built on a modular architecture with the following components:

    Memory Manager:

        Manages short-term and long-term memories.

        Calculates memory importance and relevance.

        Automatically consolidates and prunes memories.

    Reasoning Engine:

        Hybrid system combining rule-based and neural reasoning.

        Enhances responses based on detected reasoning types.

    Transformer Model:

        Lightweight transformer for text generation.

        Trained on user data for personalized responses.

    Reinforcement Learning Module:

        Uses a neural network to optimize responses.

        Rewards are based on response quality and user engagement.

    Preprocessor:

        Handles text tokenization and embedding.

        Uses subword tokenization for efficient processing.

Setup Instructions 🛠️
Prerequisites

    Python 3.8 or higher

    Required libraries: numpy, torch

Installation

    Clone the repository:
    bash
    Copy

    git clone https://github.com/MrLunatic007/Project-Kai.git
    cd 'Project Kai'

    Install dependencies:
    bash
    Copy

    pip install -r requirements.txt

    Download or prepare your dataset:

        Place your dataset in the data/ directory (default: data/dataset.csv).

        The dataset should have columns: input (user query) and output (assistant response).

        use the script.py and panda.py files to clean the datasets

    Train the model (optional):
    bash
    Copy

    python main.py --train --data data/dataset.csv

    Run the assistant:
    bash
    Copy

    python main.py

Usage 🚀
Starting a Conversation

    Run the assistant:
    bash
    Copy

    python main.py

    Interact with Kai:
    Copy

    You: Hello, Kai!
    Kai: Hi there! How can I help you today?

    Exit the conversation:
    Copy

    You: exit

Training the Model

To train the model on your dataset:
bash
Copy

python main.py --train --data data/dataset.csv

Customizing Kai

    Memory Settings: Adjust memory limits in memory_manager.py.

    Reasoning Rules: Add or modify rules in reasoning.py.

    Training Parameters: Tune learning rates and epochs in trainer.py.

Example Conversations 💬
Casual Chat
Copy

You: Hi Kai!
Kai: Hello! How's your day going?

Reasoning
Copy

You: Why is the sky blue?
Kai: Because of Rayleigh scattering! Sunlight gets scattered by the atmosphere, and blue light scatters more than other colors.

Personalization
Copy

You: I love pizza.
Kai: That's great! What's your favorite topping?
You: Pepperoni.
Kai: Got it! I'll remember you love pepperoni pizza.

Folder Structure 📂
Copy

kai-ai/
├── data/                   # Dataset and memory storage
│   ├── dataset.csv         # Training data
│   └── memory/             # Memory files
├── models/                 # Saved model files
│   └── kai_model.pkl       # Pretrained model
├── src/                    # Source code
│   ├── assistant.py        # Main assistant class
│   ├── memory_manager.py   # Memory management
│   ├── reasoning.py        # Reasoning engine
│   ├── transformer.py      # Transformer model
│   ├── preprocess.py       # Text preprocessing
│   └── utils.py            # Utility functions
├── main.py                 # Entry point
├── requirements.txt        # Dependencies
└── README.md               # Project documentation

Future Improvements 🚧

    Multimodal Input:

        Support for voice and image inputs.

    Advanced Personalization:

        Learn user preferences and habits over time.

    Emotion Detection:

        Detect user emotions from text and adjust responses accordingly.

    API Integration:

        Connect to external APIs for real-time information.

    Deployment:

        Dockerize the application for easy deployment.

        Create a web interface for remote access.

        Make an android version that is tied to the hardware for accessibility on demand locally


Contributing 🤝

Contributions are welcome! Here's how you can help:

    Report bugs or suggest features by opening an issue.

    Submit pull requests for improvements or new features.

    Improve documentation or add examples.

License 📜

This project is licensed under the MIT License. See the LICENSE file for details.
Acknowledgments 🙏


    Built with ❤️ by Sammy Davis (Mr Lunatic).